const dotenv = require('dotenv').config()
const axios = require('axios')
const { EmbedBuilder, Client, Events, GatewayIntentBits } = require('discord.js');
const registerCommands = require('./util/commands.js')

registerCommands() 

// Create a new client instance with the required intents
const client = new Client({
    intents: [
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.Guilds]
});

// When connetion is established, log the client's username in the console
client.on('ready', (c) => {
    console.log(`${c.user.tag} is online.`);
})

// When the user interacts with the bot, do the following
client.on('interactionCreate', async interaction => {
    try {
        if (interaction.isChatInputCommand()) {
            // If the command is "osu", do the following
            if (interaction.commandName === 'osu') {
                /* Fetches the client credentials OAuth2 token from the .env file. In the future, implementation is planned for 
                the automatic fetching of OAuth2 tokens every 24 hours or so due to the nature of OAuth2 tokens. */
                const profileId = interaction.options.data[0].value
                /* Fetches osu! user data from the API depending on the user profile ID fetched from the Discord message */
                const { data } = await axios.get(`https://osu.ppy.sh/api/v2/users/${profileId}`, {
                    headers: {
                        'Authorization': `${process.env.OSU_TOKEN}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                })
                /* Conversion from the date format provided by the API to a UNIX timestamp */
                const rankHighestDate = new Date(data.rank_highest.updated_at)
                const rankHighestDateTimestamp = Math.floor(rankHighestDate.getTime() / 1000)
                /* Creates an embed for Discord that contains all relevant osu! user data such as PP, Rank, and Peak Rank (hopefully I can add more fields here) */
                const rankEmbed = new EmbedBuilder()
                    .setColor(0x0099FF)
                    .setAuthor({ name: `osu! data for ${data.username} `, iconURL: `https://upload.wikimedia.org/wikipedia/commons/thumb/1/1e/Osu%21_Logo_2016.svg/2048px-Osu%21_Logo_2016.svg.png`, url: `https://osu.ppy.sh/u/${data.id}` })
                    .setThumbnail(`${data.avatar_url}`)
                    .addFields(
                        { name: 'PP', value: `${data.statistics.pp}`, inline: true },
                        { name: 'Rank', value: `#${data.statistics.global_rank}`, inline: true },
                        { name: 'Peak Rank', value: `#${data.rank_highest.rank} @ <t:${rankHighestDateTimestamp}:D>`, inline: true },
                    )
                    .setTimestamp()
                    .setFooter({ text: 'Generated by ConnorBot', iconURL: 'https://i.imgur.com/wv2nHk8.png' });

                await interaction.reply({ embeds: [rankEmbed] });
            }
        }
    } catch (error) {
        /* If the user ID specified is not found, respond with a message that the user data was not found. */
        try {
            await interaction.reply(`warning warning! user ${interaction.options.data[0].value} not found!`);
        }
        catch (error) {
            /* If the bot is not able to respond for any whatsoever reason, log the error in the console. */
            console.log(error)
        }

    }
})

client.login(process.env.DISCORD_TOKEN);

